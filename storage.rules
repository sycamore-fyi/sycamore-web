rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    function isAuthed() { return request.auth != null }
    function userId() { return request.auth.uid }
    function membershipPath(orgId) { return /databases/(default)/documents/Membership/$(orgId + ":" + userId()) }
    function isMember(orgId) { return firestore.exists(membershipPath(orgId)) }
    function isValidUploadType() {
      return request.resource.contentType in [
        "video/mp4",
        "video/quicktime",
        "video/x-msvideo",
        "video/x-flv",
        "video/x-ms-wmv",
        "video/webm",
        "video/mpeg",
        "video/x-matroska",
        "audio/mpeg",
        "audio/wav",
        "audio/aac",
        "audio/flac",
        "audio/ogg",
        "audio/opus",
        "audio/aiff",
        "audio/mp4"
      ]
    }

    function isReasonableSize() {
      return request.resource.size < 5 * 1024 * 1024 * 1024 
    }

    match /{orgId}/{callId}/{filename} {
      allow read: if isAuthed() && isMember(orgId);
      allow create: if (
        isAuthed() &&
        isMember(orgId) &&
        isValidUploadType() &&
        isReasonableSize() &&
        filename.matches("uploaded_call.*") &&
        request.resource.metadata.userId == userId()
      )
    }
  }
}
